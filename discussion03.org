#+title: Discussion03

* Creating the fork pseudocode:
    for i = 1 -1;
        task  = alskdflaskjf
        fds[2] = pipe(fds);
        ret = fork();
        if child {
            dup2(stdout, fds[1]);
            DUP2(stdin, fds[0]);
            exec(task)
        }
        else {
            waitpid(ret);
        }

    concept: parent makes a kid, kid does a part of the pipe, dies, then parent makes a new kid
* Recursive Model
    start from the end, make recursive call backwards
    edge case: first process

* Lab 2
* Lab 2 Background
** Why scheduling:
*** run multiple things at a time
*** cpu is a preemtable resource, you can run & swap multiple times
** WHy good scheduling
*** First Come First Serve, give each equal time
**** strict ordering of incomming tasks
**** wait and response will be too long if you wait some time before coming to class
*** Easiest problem first: Shortest Job First
**** Minimizes waiting time
**** Problem: we don't know exactly how long a program will run
*** Shortest remaining time first
**** Improved SJF with preemption, compare burst time w/ current task's remaining time
**** Same problem as SJF: don't know for sure the burst time
** Metrics:
*** minimize waiting and response time
*** mazimize CPU utilizaton
* Lab 2: what is it about
** Implement round robin (RR) scheduling
** output is average waiting and response time for a simulation run
** CRUX: know how round-robin scheduling works and utilize a data structure
* Round robin schedule:
** FIFO structure
** Quantum (limited amount) amount of product
*** if you want more, you need to get back into line
*** When you get to the front of the queue, the CPU decides for you how much food you get
* Example
| Process | Arrival Time | Burst Time |
| p1      |            0 |          7 |
| p2      |            2 |          4 |
| p3      |            4 |          1 |
| p4      |            5 |          4 |
** draw trajectory of occupancy of cpu
** draw trajectory of the que of unfinished tasks
** calculare average wait/response time
** Solution
*** Arrival: p1 p2 p3 p4
*** occupance:
| 1 | 1 | 1 |   2 |   2 |     2 |   |   |   |   |    |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
| 1 | 0 | 2 | 2,1 | 1,3 | 1,3,4 |   |   |   |   |    |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
| 0 | 1 | 2 |   3 |   4 |     5 | 6 | 7 | 8 | 9 | 10 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
*** waiting queue
*** Wait time:
| 1 | 0 | WT |
* Doubly linked list
